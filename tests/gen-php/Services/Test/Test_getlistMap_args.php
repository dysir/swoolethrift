<?php
namespace Services\Test;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Test_getlistMap_args
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'listmap',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::MAP,
            'elem' => array(
                'type' => TType::MAP,
                'ktype' => TType::STRING,
                'vtype' => TType::STRING,
                'key' => array(
                    'type' => TType::STRING,
                ),
                'val' => array(
                    'type' => TType::STRING,
                    ),
                ),
        ),
    );

    /**
     * @var (array)[]
     */
    public $listmap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['listmap'])) {
                $this->listmap = $vals['listmap'];
            }
        }
    }

    public function getName()
    {
        return 'Test_getlistMap_args';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->listmap = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $elem5 = array();
                            $_size6 = 0;
                            $_ktype7 = 0;
                            $_vtype8 = 0;
                            $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
                            for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                                $key11 = '';
                                $val12 = '';
                                $xfer += $input->readString($key11);
                                $xfer += $input->readString($val12);
                                $elem5[$key11] = $val12;
                            }
                            $xfer += $input->readMapEnd();
                            $this->listmap []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Test_getlistMap_args');
        if ($this->listmap !== null) {
            if (!is_array($this->listmap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('listmap', TType::LST, 1);
            $output->writeListBegin(TType::MAP, count($this->listmap));
            foreach ($this->listmap as $iter13) {
                $output->writeMapBegin(TType::STRING, TType::STRING, count($iter13));
                foreach ($iter13 as $kiter14 => $viter15) {
                    $xfer += $output->writeString($kiter14);
                    $xfer += $output->writeString($viter15);
                }
                $output->writeMapEnd();
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
